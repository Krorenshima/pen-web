// Generated by CoffeeScript 2.3.1
var follower, header, menu, rando, randowo, selector, showler, styz, wrapper, yaynay;

yaynay = !1;

rando = pen('<div class="rando">').appendTo('body').css({
  background: 'rgba(0,0,0,.5)',
  border: 'solid 2px grey',
  'border-radius': '15px',
  position: 'fixed',
  display: 'none',
  color: 'white',
  padding: '5px',
  'z-index': 19999
});

styz = pen('<link rel="stylesheet" href="../../style.css">');

wrapper = pen('<div id="wrpr" class="wrapper">');

selector = new Container('element-selector');

header = new Header('Selector');

header.builder('Pen|../../index.html', 'Tabs|../tabs/index.html', 'Github|https://github.com/Krorenshima/Pen');

menu = new ContextMenu();

showler = (e) => {
  var selrr;
  selrr = pen(e.target).selector;
  if (selrr === rando.selector) {
    return;
  }
  rando.html(selrr);
};

follower = (e) => {
  rando.css({
    top: `${e.clientY + 4}px`,
    left: `${e.clientX + 20}px`
  });
};

menu.checkFor('selector', {
  typ: 'btn',
  name: 'Close',
  act: function(e) {
    var target;
    target = pen(e.target);
    Selectionr.remove('_id', +target.attr('num'));
  }
}).checkFor('wrapper', {
  typ: 'btn',
  name: 'Show classes',
  act: function() {
    if (yaynay === !1) {
      yaynay = !0;
      rando.css('display', '');
      if (pBody.el.events != null) {
        if ((pBody.el.events['mousemove'] != null) || (pBody.el.events['mouseover'] != null)) {
          return;
        }
        return pBody.on('mouseover', showler).on('mousemove', follower);
      } else {
        return pBody.on('mouseover', showler).on('mousemove', follower);
      }
    } else {
      yaynay = !1;
      return rando.css('display', 'none');
    }
  }
});

menu.create([
  {
    typ: 'btn',
    name: 'Back',
    act: () => {
      return window.history.back();
    }
  },
  {
    typ: 'btn',
    name: 'Forward',
    act: () => {
      return window.history.forward();
    }
  },
  {
    typ: 'btn',
    name: 'Reload',
    act: () => {
      return window.location.reload();
    }
  },
  {
    typ: 'break'
  },
  {
    typ: 'btn',
    name: 'Reload Style',
    act: () => {
      return styz.remove(true).appendTo(pHead);
    }
  }
]);

selector.cont.attr('align', 'center');

selector.msng = function(str, fn) {
  if (fn == null) {
    fn = () => {
      return selector.sideMsg.html('');
    };
  }
  selector.sideMsg.html(str);
  setTimeout(() => {
    return fn();
  }, 1750);
};

selector.input = selector.create('<input>', !1).attr({
  id: 'selectrInput',
  class: 'element-input input',
  placeholder: 'Place selector here.'
}).on('keydown', (e) => {
  if (e.key === 'Enter') {
    e.preventDefault();
    return selector.btn.el.click();
  }
});

selector.btn = selector.create('<button>', !1).attr({
  id: 'selectrBtn',
  class: 'element-selector btn'
}).html('Submit').on('click', (e) => {
  var el, timeout, val;
  val = selector.input.text;
  timeout = 1750;
  if (val.length === 0) {
    selector.msng('Try putting in some text next time XWX');
  } else {
    el = pen.$(val, !0);
    if (el.el != null) {
      selector.input.html('');
      wrapper.append((new Selectionr(el)).cont);
      selector.msng('Calculating!', () => {
        el.toggle('selected');
        selector.sideMsg.html('');
      });
    } else {
      selector.msng(`Welp, no element was found with '${val}'. Try something else`);
    }
  }
});

selector.create('<br>', !1);

selector.sideMsg = selector.create('<p>', !1).attr({
  id: 'sideInfo',
  class: 'side-message'
});

wrapper.append(selector.cont);

pBody.append(menu.cont, header.cont, wrapper);

pHead.append(styz);

randowo = ['a.btn[href]', '#selectrBtn', '#hdr'];

selector.input.html(pen.random(randowo));

selector.btn.el.click();
